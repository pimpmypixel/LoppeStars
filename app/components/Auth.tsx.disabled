import React from 'react';
import { View, Alert, TouchableOpacity, Linking } from 'react-native';
import { GoogleSignin } from '@react-native-google-signin/google-signin';
import Config from 'react-native-config';
import { supabase } from '../utils/supabase';
import { useTranslation } from '../utils/localization';
import Logo from './Logo';
import { Button, Text, Card, CardContent, CardHeader, CardTitle } from './ui-kitten';

export default function Auth() {
    const { t } = useTranslation();

    const ensureGoogleClientId = React.useCallback(() => {
        if (!Config.GOOGLE_WEB_CLIENT_ID) {
            Alert.alert(t('common.error'), 'Google web client ID is not set. Please update your .env file.');
            return false;
        }
        return true;
    }, []);

    React.useEffect(() => {
        if (!Config.GOOGLE_WEB_CLIENT_ID) {
            console.warn('‚ö†Ô∏è GOOGLE_WEB_CLIENT_ID is not defined in the environment configuration. Google Sign-In will fail.');
            return;
        }

        GoogleSignin.configure({
            webClientId: Config.GOOGLE_WEB_CLIENT_ID,
            androidClientId: Config.GOOGLE_ANDROID_CLIENT_ID,
            iosClientId: Config.GOOGLE_WEB_CLIENT_ID, // iOS can use web client ID
            scopes: ['email', 'profile'],
        } as any);
    }, []);

    const testGoogleSigninOnly = async () => {
        try {
            if (!ensureGoogleClientId()) {
                return;
            }
            console.log('üîß Testing Google Sign-in ONLY...');
            await GoogleSignin.hasPlayServices();
            console.log('‚úÖ Google Play Services available');

            const userInfo = await GoogleSignin.signIn();
            Alert.alert('Google Sign-in Success', `Welcome ${userInfo.data?.user?.name}!`);

            // Sign out immediately for testing
            await GoogleSignin.signOut();
            console.log('‚úÖ Signed out successfully');

        } catch (error: any) {
            console.error('‚ùå Google Sign-in test error:', error);
            Alert.alert('Google Sign-in Error', error.message || 'Unknown error');
        }
    };

    const signIn = async () => {
        try {
            if (!ensureGoogleClientId()) {
                return;
            }
            console.log('üîß Starting Google sign-in process...');

            await GoogleSignin.hasPlayServices();
            console.log('‚úÖ Google Play Services available');

            const userInfo = await GoogleSignin.signIn();
            console.log('‚úÖ Google Sign-in successful');

            if (userInfo.data?.idToken) {
                console.log('üîß Attempting Supabase auth...');
                const { data, error } = await supabase.auth.signInWithIdToken({
                    provider: 'google',
                    token: userInfo.data.idToken,
                });

                if (error) {
                    console.error('‚ùå Supabase auth error:', error);
                    Alert.alert(t('common.error'), `${t('auth.signInError')}: ${error.message}`);
                } else {
                    console.log('‚úÖ Supabase auth successful!');
                }
            } else {
                console.error('‚ùå No idToken received from Google sign-in');
                Alert.alert(t('common.error'), t('auth.signInError'));
            }

        } catch (error: any) {
            console.error('‚ùå Sign-in error:', error);
            Alert.alert(t('common.error'), `${t('auth.signInError')}: ${error.message || 'Unknown error'}`);
        }
    };

    return (
        <View className="flex-1 justify-center items-center bg-background p-5" {...({} as any)}>
            <Card className="w-full max-w-sm">
                <CardHeader className="items-center">
                    <Logo size="large" />
                    <CardTitle className="text-center mt-5">
                        {t('common.welcome')}
                    </CardTitle>
                    <Text variant="muted" className="text-center mt-2">
                        {t('auth.pleaseSignIn')}
                    </Text>
                </CardHeader>

                <CardContent className="gap-4">
                    <Button
                        variant="outline"
                        className="bg-white border-gray-300 hover:bg-gray-50 h-12 rounded-full"
                        onPress={signIn}
                        {...({} as any)}
                    >
                        <View className="flex-row items-center gap-3" {...({} as any)}>
                            <View className="w-6 h-6 bg-blue-500 rounded-full items-center justify-center" {...({} as any)}>
                                <Text className="text-white font-bold text-sm">G</Text>
                            </View>
                            <Text className="text-gray-700 font-medium">
                                {t('auth.signInWithGoogle')}
                            </Text>
                        </View>
                    </Button>

                    <TouchableOpacity
                        className="items-center py-2"
                        onPress={() => Linking.openURL('https://loppestars.com/privacy')}
                        {...({} as any)}
                    >
                        <Text variant="muted" className="text-xs underline">
                            {t('auth.privacyPolicy')}
                        </Text>
                    </TouchableOpacity>
                </CardContent>
            </Card>
        </View>
    );
}
